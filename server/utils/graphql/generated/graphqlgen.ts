// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql"
import { User, Permission, Context } from "../../../types/models"

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
  }

  export type IdResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export interface Type {
    id:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }
  }
}

export namespace PermissionResolvers {
  export const defaultResolvers = {
    id: (parent: Permission) => parent.id,
    userID: (parent: Permission) =>
      parent.userID === undefined ? null : parent.userID,
    level: (parent: Permission) => parent.level,
    resourceID: (parent: Permission) =>
      parent.resourceID === undefined ? null : parent.resourceID,
  }

  export type IdResolver =
    | ((
        parent: Permission,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: Permission,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type UserIDResolver =
    | ((
        parent: Permission,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string
        resolve: (
          parent: Permission,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>
      }

  export type LevelResolver =
    | ((
        parent: Permission,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string
        resolve: (
          parent: Permission,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>
      }

  export type ResourceIDResolver =
    | ((
        parent: Permission,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string
        resolve: (
          parent: Permission,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>
      }

  export interface Type {
    id:
      | ((
          parent: Permission,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: Permission,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    userID:
      | ((
          parent: Permission,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string
          resolve: (
            parent: Permission,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>
        }

    level:
      | ((
          parent: Permission,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string
          resolve: (
            parent: Permission,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>
        }

    resourceID:
      | ((
          parent: Permission,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string
          resolve: (
            parent: Permission,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>
        }
  }
}

export interface Resolvers {
  User: UserResolvers.Type
  Permission: PermissionResolvers.Type
}

// @ts-ignore
declare module "graphql-tools" {
  interface IResolvers extends Resolvers {}
}
