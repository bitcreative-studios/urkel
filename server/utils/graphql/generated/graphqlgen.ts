// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo, GraphQLIsTypeOfFn } from "graphql"
import {
  User,
  Permission,
  Issue,
  Project,
  Role,
  Task,
  IssueComment,
  TaskComment,
  Context,
} from "../../../types/models"

export type RoleType = "USER" | "ADMIN" | "DEVELOPER"
export type CommentParentType = "ISSUE" | "TASK"

export namespace QueryResolvers {
  export const defaultResolvers = {}

  export type UserResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export interface Type {
    user:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    joinDate: (parent: User) => parent.joinDate,
    username: (parent: User) => parent.username,
    email: (parent: User) => parent.email,
    firstname: (parent: User) => parent.firstname,
    lastname: (parent: User) => parent.lastname,
    avatarUrl: (parent: User) =>
      parent.avatarUrl === undefined ? null : parent.avatarUrl,
    bio: (parent: User) => (parent.bio === undefined ? null : parent.bio),
  }

  export type IdResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type JoinDateResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type UsernameResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type EmailResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type FirstnameResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type LastnameResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type AvatarUrlResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>
      }

  export type BioResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>
      }

  export interface Type {
    id:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    joinDate:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    username:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    email:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    firstname:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    lastname:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    avatarUrl:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>
        }

    bio:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>
        }
  }
}

export namespace PermissionResolvers {
  export const defaultResolvers = {
    id: (parent: Permission) => parent.id,
    userID: (parent: Permission) =>
      parent.userID === undefined ? null : parent.userID,
    level: (parent: Permission) => parent.level,
    resouceID: (parent: Permission) =>
      parent.resouceID === undefined ? null : parent.resouceID,
  }

  export type IdResolver =
    | ((
        parent: Permission,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: Permission,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type UserIDResolver =
    | ((
        parent: Permission,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string
        resolve: (
          parent: Permission,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>
      }

  export type LevelResolver =
    | ((
        parent: Permission,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string
        resolve: (
          parent: Permission,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>
      }

  export type ResouceIDResolver =
    | ((
        parent: Permission,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string
        resolve: (
          parent: Permission,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>
      }

  export interface Type {
    id:
      | ((
          parent: Permission,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: Permission,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    userID:
      | ((
          parent: Permission,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string
          resolve: (
            parent: Permission,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>
        }

    level:
      | ((
          parent: Permission,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string
          resolve: (
            parent: Permission,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>
        }

    resouceID:
      | ((
          parent: Permission,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string
          resolve: (
            parent: Permission,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>
        }
  }
}

export namespace IssueResolvers {
  export const defaultResolvers = {
    id: (parent: Issue) => parent.id,
    dateCreated: (parent: Issue) => parent.dateCreated,
    dateUpdated: (parent: Issue) => parent.dateUpdated,
    title: (parent: Issue) => parent.title,
    body: (parent: Issue) => (parent.body === undefined ? null : parent.body),
    priority: (parent: Issue) => parent.priority,
    status: (parent: Issue) => parent.status,
    type: (parent: Issue) => parent.type,
    tags: (parent: Issue) => (parent.tags === undefined ? null : parent.tags),
  }

  export type IdResolver =
    | ((
        parent: Issue,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type DateCreatedResolver =
    | ((
        parent: Issue,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type DateUpdatedResolver =
    | ((
        parent: Issue,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type CreatorResolver =
    | ((
        parent: Issue,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string
        resolve: (
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>
      }

  export type TitleResolver =
    | ((
        parent: Issue,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type BodyResolver =
    | ((
        parent: Issue,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string
        resolve: (
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>
      }

  export type PriorityResolver =
    | ((
        parent: Issue,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type StatusResolver =
    | ((
        parent: Issue,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type TypeResolver =
    | ((
        parent: Issue,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type ProjectResolver =
    | ((
        parent: Issue,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Project | Promise<Project>)
    | {
        fragment: string
        resolve: (
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Project | Promise<Project>
      }

  export type TagsResolver =
    | ((
        parent: Issue,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<string | null> | Promise<Array<string | null>>)
    | {
        fragment: string
        resolve: (
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<string | null> | Promise<Array<string | null>>
      }

  export type UserPermissionsResolver =
    | ((
        parent: Issue,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Permission | null | Promise<Permission | null>)
    | {
        fragment: string
        resolve: (
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Permission | null | Promise<Permission | null>
      }

  export interface Type {
    id:
      | ((
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: Issue,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    dateCreated:
      | ((
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: Issue,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    dateUpdated:
      | ((
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: Issue,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    creator:
      | ((
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string
          resolve: (
            parent: Issue,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>
        }

    title:
      | ((
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: Issue,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    body:
      | ((
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string
          resolve: (
            parent: Issue,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>
        }

    priority:
      | ((
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: Issue,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    status:
      | ((
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: Issue,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    type:
      | ((
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: Issue,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    project:
      | ((
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Project | Promise<Project>)
      | {
          fragment: string
          resolve: (
            parent: Issue,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Project | Promise<Project>
        }

    tags:
      | ((
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<string | null> | Promise<Array<string | null>>)
      | {
          fragment: string
          resolve: (
            parent: Issue,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<string | null> | Promise<Array<string | null>>
        }

    userPermissions:
      | ((
          parent: Issue,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Permission | null | Promise<Permission | null>)
      | {
          fragment: string
          resolve: (
            parent: Issue,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Permission | null | Promise<Permission | null>
        }

    __isTypeOf?: GraphQLIsTypeOfFn<Issue | Task, Context>
  }
}

export namespace ProjectResolvers {
  export const defaultResolvers = {
    id: (parent: Project) => parent.id,
    dateCreated: (parent: Project) => parent.dateCreated,
    dateUpdated: (parent: Project) => parent.dateUpdated,
    name: (parent: Project) => parent.name,
    alias: (parent: Project) =>
      parent.alias === undefined ? null : parent.alias,
  }

  export type IdResolver =
    | ((
        parent: Project,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: Project,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type DateCreatedResolver =
    | ((
        parent: Project,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: Project,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type DateUpdatedResolver =
    | ((
        parent: Project,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: Project,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type CreatorResolver =
    | ((
        parent: Project,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string
        resolve: (
          parent: Project,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>
      }

  export type NameResolver =
    | ((
        parent: Project,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: Project,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type AliasResolver =
    | ((
        parent: Project,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string
        resolve: (
          parent: Project,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>
      }

  export type UserPermissionsResolver =
    | ((
        parent: Project,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Permission | null | Promise<Permission | null>)
    | {
        fragment: string
        resolve: (
          parent: Project,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Permission | null | Promise<Permission | null>
      }

  export interface Type {
    id:
      | ((
          parent: Project,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: Project,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    dateCreated:
      | ((
          parent: Project,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: Project,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    dateUpdated:
      | ((
          parent: Project,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: Project,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    creator:
      | ((
          parent: Project,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string
          resolve: (
            parent: Project,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>
        }

    name:
      | ((
          parent: Project,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: Project,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    alias:
      | ((
          parent: Project,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string
          resolve: (
            parent: Project,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>
        }

    userPermissions:
      | ((
          parent: Project,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Permission | null | Promise<Permission | null>)
      | {
          fragment: string
          resolve: (
            parent: Project,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Permission | null | Promise<Permission | null>
        }

    __isTypeOf?: GraphQLIsTypeOfFn<
      Issue | Project | Task | IssueComment | TaskComment,
      Context
    >
  }
}

export namespace RoleResolvers {
  export const defaultResolvers = {}

  export type ProjectResolver =
    | ((
        parent: Role,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Project | Promise<Project>)
    | {
        fragment: string
        resolve: (
          parent: Role,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Project | Promise<Project>
      }

  export type UserResolver =
    | ((
        parent: Role,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string
        resolve: (
          parent: Role,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>
      }

  export type RoletypeResolver =
    | ((
        parent: Role,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => RoleType | Promise<RoleType>)
    | {
        fragment: string
        resolve: (
          parent: Role,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => RoleType | Promise<RoleType>
      }

  export interface Type {
    project:
      | ((
          parent: Role,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Project | Promise<Project>)
      | {
          fragment: string
          resolve: (
            parent: Role,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Project | Promise<Project>
        }

    user:
      | ((
          parent: Role,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string
          resolve: (
            parent: Role,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>
        }

    roletype:
      | ((
          parent: Role,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => RoleType | Promise<RoleType>)
      | {
          fragment: string
          resolve: (
            parent: Role,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => RoleType | Promise<RoleType>
        }
  }
}

export namespace TaskResolvers {
  export const defaultResolvers = {
    id: (parent: Task) => parent.id,
    dateCreated: (parent: Task) => parent.dateCreated,
    dateUpdated: (parent: Task) => parent.dateUpdated,
    title: (parent: Task) => parent.title,
    body: (parent: Task) => (parent.body === undefined ? null : parent.body),
    completed: (parent: Task) => parent.completed,
  }

  export type IdResolver =
    | ((
        parent: Task,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: Task,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type DateCreatedResolver =
    | ((
        parent: Task,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: Task,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type DateUpdatedResolver =
    | ((
        parent: Task,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: Task,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type CreatorResolver =
    | ((
        parent: Task,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string
        resolve: (
          parent: Task,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>
      }

  export type TitleResolver =
    | ((
        parent: Task,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: Task,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type BodyResolver =
    | ((
        parent: Task,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string
        resolve: (
          parent: Task,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>
      }

  export type ParentResolver =
    | ((
        parent: Task,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Issue | Promise<Issue>)
    | {
        fragment: string
        resolve: (
          parent: Task,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Issue | Promise<Issue>
      }

  export type CompletedResolver =
    | ((
        parent: Task,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string
        resolve: (
          parent: Task,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>
      }

  export type UserPermissionsResolver =
    | ((
        parent: Task,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Permission | null | Promise<Permission | null>)
    | {
        fragment: string
        resolve: (
          parent: Task,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Permission | null | Promise<Permission | null>
      }

  export interface Type {
    id:
      | ((
          parent: Task,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: Task,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    dateCreated:
      | ((
          parent: Task,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: Task,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    dateUpdated:
      | ((
          parent: Task,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: Task,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    creator:
      | ((
          parent: Task,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string
          resolve: (
            parent: Task,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>
        }

    title:
      | ((
          parent: Task,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: Task,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    body:
      | ((
          parent: Task,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string
          resolve: (
            parent: Task,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>
        }

    parent:
      | ((
          parent: Task,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Issue | Promise<Issue>)
      | {
          fragment: string
          resolve: (
            parent: Task,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Issue | Promise<Issue>
        }

    completed:
      | ((
          parent: Task,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string
          resolve: (
            parent: Task,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>
        }

    userPermissions:
      | ((
          parent: Task,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Permission | null | Promise<Permission | null>)
      | {
          fragment: string
          resolve: (
            parent: Task,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Permission | null | Promise<Permission | null>
        }

    __isTypeOf?: GraphQLIsTypeOfFn<Issue | Task, Context>
  }
}

export namespace IssueCommentResolvers {
  export const defaultResolvers = {
    id: (parent: IssueComment) => parent.id,
    dateCreated: (parent: IssueComment) => parent.dateCreated,
    dateUpdated: (parent: IssueComment) => parent.dateUpdated,
    body: (parent: IssueComment) => parent.body,
  }

  export type IdResolver =
    | ((
        parent: IssueComment,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: IssueComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type DateCreatedResolver =
    | ((
        parent: IssueComment,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: IssueComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type DateUpdatedResolver =
    | ((
        parent: IssueComment,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: IssueComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type CreatorResolver =
    | ((
        parent: IssueComment,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string
        resolve: (
          parent: IssueComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>
      }

  export type BodyResolver =
    | ((
        parent: IssueComment,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: IssueComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type ParnetResolver =
    | ((
        parent: IssueComment,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Issue | Promise<Issue>)
    | {
        fragment: string
        resolve: (
          parent: IssueComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Issue | Promise<Issue>
      }

  export type ParentTypeResolver =
    | ((
        parent: IssueComment,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => CommentParentType | Promise<CommentParentType>)
    | {
        fragment: string
        resolve: (
          parent: IssueComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => CommentParentType | Promise<CommentParentType>
      }

  export type UserPermissionsResolver =
    | ((
        parent: IssueComment,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Permission | null | Promise<Permission | null>)
    | {
        fragment: string
        resolve: (
          parent: IssueComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Permission | null | Promise<Permission | null>
      }

  export interface Type {
    id:
      | ((
          parent: IssueComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: IssueComment,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    dateCreated:
      | ((
          parent: IssueComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: IssueComment,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    dateUpdated:
      | ((
          parent: IssueComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: IssueComment,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    creator:
      | ((
          parent: IssueComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string
          resolve: (
            parent: IssueComment,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>
        }

    body:
      | ((
          parent: IssueComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: IssueComment,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    parnet:
      | ((
          parent: IssueComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Issue | Promise<Issue>)
      | {
          fragment: string
          resolve: (
            parent: IssueComment,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Issue | Promise<Issue>
        }

    parentType:
      | ((
          parent: IssueComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => CommentParentType | Promise<CommentParentType>)
      | {
          fragment: string
          resolve: (
            parent: IssueComment,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => CommentParentType | Promise<CommentParentType>
        }

    userPermissions:
      | ((
          parent: IssueComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Permission | null | Promise<Permission | null>)
      | {
          fragment: string
          resolve: (
            parent: IssueComment,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Permission | null | Promise<Permission | null>
        }

    __isTypeOf?: GraphQLIsTypeOfFn<
      | Issue
      | Project
      | Task
      | IssueComment
      | TaskComment
      | IssueComment
      | TaskComment,
      Context
    >
  }
}

export namespace TaskCommentResolvers {
  export const defaultResolvers = {
    id: (parent: TaskComment) => parent.id,
    dateCreated: (parent: TaskComment) => parent.dateCreated,
    dateUpdated: (parent: TaskComment) => parent.dateUpdated,
    body: (parent: TaskComment) => parent.body,
  }

  export type IdResolver =
    | ((
        parent: TaskComment,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: TaskComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type DateCreatedResolver =
    | ((
        parent: TaskComment,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: TaskComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type DateUpdatedResolver =
    | ((
        parent: TaskComment,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: TaskComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type CreatorResolver =
    | ((
        parent: TaskComment,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string
        resolve: (
          parent: TaskComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>
      }

  export type BodyResolver =
    | ((
        parent: TaskComment,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: TaskComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>
      }

  export type ParnetResolver =
    | ((
        parent: TaskComment,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Task | Promise<Task>)
    | {
        fragment: string
        resolve: (
          parent: TaskComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Task | Promise<Task>
      }

  export type ParentTypeResolver =
    | ((
        parent: TaskComment,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => CommentParentType | Promise<CommentParentType>)
    | {
        fragment: string
        resolve: (
          parent: TaskComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => CommentParentType | Promise<CommentParentType>
      }

  export type UserPermissionsResolver =
    | ((
        parent: TaskComment,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Permission | null | Promise<Permission | null>)
    | {
        fragment: string
        resolve: (
          parent: TaskComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Permission | null | Promise<Permission | null>
      }

  export interface Type {
    id:
      | ((
          parent: TaskComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: TaskComment,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    dateCreated:
      | ((
          parent: TaskComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: TaskComment,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    dateUpdated:
      | ((
          parent: TaskComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: TaskComment,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    creator:
      | ((
          parent: TaskComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string
          resolve: (
            parent: TaskComment,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>
        }

    body:
      | ((
          parent: TaskComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: TaskComment,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>
        }

    parnet:
      | ((
          parent: TaskComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Task | Promise<Task>)
      | {
          fragment: string
          resolve: (
            parent: TaskComment,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Task | Promise<Task>
        }

    parentType:
      | ((
          parent: TaskComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => CommentParentType | Promise<CommentParentType>)
      | {
          fragment: string
          resolve: (
            parent: TaskComment,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => CommentParentType | Promise<CommentParentType>
        }

    userPermissions:
      | ((
          parent: TaskComment,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Permission | null | Promise<Permission | null>)
      | {
          fragment: string
          resolve: (
            parent: TaskComment,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Permission | null | Promise<Permission | null>
        }

    __isTypeOf?: GraphQLIsTypeOfFn<
      | Issue
      | Project
      | Task
      | IssueComment
      | TaskComment
      | IssueComment
      | TaskComment,
      Context
    >
  }
}

export namespace ResourceResolvers {
  export interface Type {
    __resolveType: (
      value: Issue | Project | Task | IssueComment | TaskComment,
      context: Context,
      info: GraphQLResolveInfo
    ) =>
      | "Issue"
      | "Project"
      | "Task"
      | "IssueComment"
      | "TaskComment"
      | Promise<"Issue" | "Project" | "Task" | "IssueComment" | "TaskComment">
  }
}

export namespace CommentResolvers {
  export interface Type {
    __resolveType: (
      value: IssueComment | TaskComment,
      context: Context,
      info: GraphQLResolveInfo
    ) =>
      | "IssueComment"
      | "TaskComment"
      | Promise<"IssueComment" | "TaskComment">
  }
}

export namespace CParentTypeResolvers {
  export interface Type {
    __resolveType?: (
      value: Issue | Task,
      context: Context,
      info: GraphQLResolveInfo
    ) => "Issue" | "Task" | Promise<"Issue" | "Task">
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type
  User: UserResolvers.Type
  Permission: PermissionResolvers.Type
  Issue: IssueResolvers.Type
  Project: ProjectResolvers.Type
  Role: RoleResolvers.Type
  Task: TaskResolvers.Type
  IssueComment: IssueCommentResolvers.Type
  TaskComment: TaskCommentResolvers.Type
  Resource?: ResourceResolvers.Type
  Comment?: CommentResolvers.Type
  CParentType?: CParentTypeResolvers.Type
}

// @ts-ignore
declare module "graphql-tools" {
  interface IResolvers extends Resolvers {}
}
